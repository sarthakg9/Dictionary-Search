from collections import defaultdict

class DictionaryNode:
    def __init__(self):
        self.children = defaultdict(DictionaryNode)
        self.is_word = False

class DictionaryTrie:
    def __init__(self):
        self.root = DictionaryNode()

    def insert_word(self, word):
        node = self.root
        for char in word:
            node = node.children[char]
        node.is_word = True

    def search_word(self, word):
        node = self.root
        for char in word:
            if char not in node.children:
                return self._suggest_similar_words(node, word)
            node = node.children[char]
        if node.is_word:
            return word
        return self._suggest_similar_words(node, word)

    def _suggest_similar_words(self, node, word):
        similar_words = []
        self._dfs_traversal(node, word, '', similar_words)
        if similar_words:
            return similar_words[0]
        return None

    def _dfs_traversal(self, node, word, current_word, similar_words):
        if node.is_word:
            similar_words.append(current_word)
        for char, child_node in node.children.items():
            if len(similar_words) >= 1:
                return  # Limit the number of suggested words
            self._dfs_traversal(child_node, word, current_word + char, similar_words)

def build_dictionary():
    dictionary_trie = DictionaryTrie()
    with open("datafile.txt", "r") as file:
        for word in file:
            word = word.strip()  # Remove leading/trailing whitespaces
            dictionary_trie.insert_word(word)
    return dictionary_trie

# Example usage:
dictionary = build_dictionary()
search_term = input("Enter a word to search: ")
result = dictionary.search_word(search_term)

if result:
    print(f"Found: {result}")
else:
    print("No match found.")
